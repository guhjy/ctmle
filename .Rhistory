family="gaussian",
gbound=0.025,like_type="loglik" ,
fluctuation="logistic", verbose=FALSE,
detailed=FALSE, PEN=FALSE,
V=5, stopFactor=10^6)
N <- 500
p = 10
Wmat <- matrix(rnorm(N * p), ncol = p)
beta1 <- 4+2*Wmat[,1]+2*Wmat[,2]+2*Wmat[,5]+2*Wmat[,6]+2*Wmat[,8]
beta0 <- 2+2*Wmat[,1]+2*Wmat[,2]+2*Wmat[,5]+2*Wmat[,6]+2*Wmat[,8]
tau <- 2
gcoef <- matrix(c(-1,-1,rep(-(3/((p)-2)),(p)-2)),ncol=1)
Wm <- as.matrix(Wmat)
g <- 1/(1+exp(Wm%*%gcoef / 3))
hist(g)
A <- rbinom(N, 1, prob = g)
sigma <- 1
epsilon <-rnorm(N,0,sigma)
Y  <- beta0 + tau * A + epsilon
#----------------------------------------------------------------
#----------------------Test for glmnet CTMLE---------------------
#----------------------------------------------------------------
# cgmleGlmnet must provide user-specified Q
W_tmp <- data.frame(Wm[,1:3])
treated<- W_tmp[which(A==1),]
untreated<-W_tmp[which(A==0),]
Y1<-Y[which(A==1)]
Y0<-Y[which(A==0)]
#Initial Q-estimate
beta1hat <- predict(lm(Y1~.,
data=treated),newdata=W_tmp)
beta0hat <- predict(lm(Y0~.,
data=untreated),newdata=W_tmp)
Q <- matrix(c(beta0hat,beta1hat),ncol=2)
W = Wm
glmnet_fit <- cv.glmnet(y = A, x = Wm, family = 'binomial', nlambda = 40)
lambdas <-glmnet_fit$lambda[(which(glmnet_fit$lambda==glmnet_fit$lambda.min)):length(glmnet_fit$lambda)]
if(length(lambdas) > 10){
lambdas <- lambdas[1:10]
}
ctmle_fit1 <- ctmleGlmnet(Y=Y, A=A,
W=data.frame(W=W),
Q = Q, lambdas = lambdas,
ctmletype=1, alpha=.995,
family="gaussian",
gbound=0.025,like_type="loglik" ,
fluctuation="logistic", verbose=FALSE,
detailed=FALSE, PEN=FALSE,
V=5, stopFactor=10^6)
N <- 1000
p = 10
Wmat <- matrix(rnorm(N * p), ncol = p)
beta1 <- 4+2*Wmat[,1]+2*Wmat[,2]+2*Wmat[,5]+2*Wmat[,6]+2*Wmat[,8]
beta0 <- 2+2*Wmat[,1]+2*Wmat[,2]+2*Wmat[,5]+2*Wmat[,6]+2*Wmat[,8]
tau <- 2
gcoef <- matrix(c(-1,-1,rep(-(3/((p)-2)),(p)-2)),ncol=1)
Wm <- as.matrix(Wmat)
g <- 1/(1+exp(Wm%*%gcoef / 3))
hist(g)
A <- rbinom(N, 1, prob = g)
sigma <- 1
epsilon <-rnorm(N,0,sigma)
Y  <- beta0 + tau * A + epsilon
#----------------------------------------------------------------
#----------------------Test for glmnet CTMLE---------------------
#----------------------------------------------------------------
# cgmleGlmnet must provide user-specified Q
W_tmp <- data.frame(Wm[,1:3])
treated<- W_tmp[which(A==1),]
untreated<-W_tmp[which(A==0),]
Y1<-Y[which(A==1)]
Y0<-Y[which(A==0)]
#Initial Q-estimate
beta1hat <- predict(lm(Y1~.,
data=treated),newdata=W_tmp)
beta0hat <- predict(lm(Y0~.,
data=untreated),newdata=W_tmp)
Q <- matrix(c(beta0hat,beta1hat),ncol=2)
W = Wm
glmnet_fit <- cv.glmnet(y = A, x = Wm, family = 'binomial', nlambda = 40)
lambdas <-glmnet_fit$lambda[(which(glmnet_fit$lambda==glmnet_fit$lambda.min)):length(glmnet_fit$lambda)]
if(length(lambdas) > 10){
lambdas <- lambdas[1:10]
}
ctmle_fit1 <- ctmleGlmnet(Y=Y, A=A,
W=data.frame(W=W),
Q = Q, lambdas = lambdas,
ctmletype=1, alpha=.995,
family="gaussian",
gbound=0.025,like_type="loglik" ,
fluctuation="logistic", verbose=FALSE,
detailed=FALSE, PEN=FALSE,
V=5, stopFactor=10^6)
lambdas
N <- 1000
p = 10
Wmat <- matrix(rnorm(N * p), ncol = p)
beta1 <- 4+2*Wmat[,1]+2*Wmat[,2]+2*Wmat[,5]+2*Wmat[,6]+2*Wmat[,8]
beta0 <- 2+2*Wmat[,1]+2*Wmat[,2]+2*Wmat[,5]+2*Wmat[,6]+2*Wmat[,8]
tau <- 2
gcoef <- matrix(c(-1,-1,rep(-(3/((p)-2)),(p)-2)),ncol=1)
Wm <- as.matrix(Wmat)
g <- 1/(1+exp(Wm%*%gcoef / 3))
hist(g)
A <- rbinom(N, 1, prob = g)
sigma <- 1
epsilon <-rnorm(N,0,sigma)
Y  <- beta0 + tau * A + epsilon
#----------------------------------------------------------------
#----------------------Test for glmnet CTMLE---------------------
#----------------------------------------------------------------
# cgmleGlmnet must provide user-specified Q
W_tmp <- data.frame(Wm[,1:3])
treated<- W_tmp[which(A==1),]
untreated<-W_tmp[which(A==0),]
Y1<-Y[which(A==1)]
Y0<-Y[which(A==0)]
#Initial Q-estimate
beta1hat <- predict(lm(Y1~.,
data=treated),newdata=W_tmp)
beta0hat <- predict(lm(Y0~.,
data=untreated),newdata=W_tmp)
Q <- matrix(c(beta0hat,beta1hat),ncol=2)
W = Wm
glmnet_fit <- cv.glmnet(y = A, x = Wm, family = 'binomial', nlambda = 40)
lambdas <-glmnet_fit$lambda[(which(glmnet_fit$lambda==glmnet_fit$lambda.min)):length(glmnet_fit$lambda)]
lambdas
N <- 1000
p = 10
Wmat <- matrix(rnorm(N * p), ncol = p)
beta1 <- 4+2*Wmat[,1]+2*Wmat[,2]+2*Wmat[,5]+2*Wmat[,6]+2*Wmat[,8]
beta0 <- 2+2*Wmat[,1]+2*Wmat[,2]+2*Wmat[,5]+2*Wmat[,6]+2*Wmat[,8]
tau <- 2
gcoef <- matrix(c(-1,-1,rep(0,(p)-2)),ncol=1)
Wm <- as.matrix(Wmat)
g <- 1/(1+exp(Wm%*%gcoef / 3))
hist(g)
A <- rbinom(N, 1, prob = g)
sigma <- 1
epsilon <-rnorm(N,0,sigma)
Y  <- beta0 + tau * A + epsilon
#----------------------------------------------------------------
#----------------------Test for glmnet CTMLE---------------------
#----------------------------------------------------------------
# cgmleGlmnet must provide user-specified Q
W_tmp <- data.frame(Wm[,1:3])
treated<- W_tmp[which(A==1),]
untreated<-W_tmp[which(A==0),]
Y1<-Y[which(A==1)]
Y0<-Y[which(A==0)]
#Initial Q-estimate
beta1hat <- predict(lm(Y1~.,
data=treated),newdata=W_tmp)
beta0hat <- predict(lm(Y0~.,
data=untreated),newdata=W_tmp)
Q <- matrix(c(beta0hat,beta1hat),ncol=2)
W = Wm
glmnet_fit <- cv.glmnet(y = A, x = Wm, family = 'binomial', nlambda = 40)
lambdas <-glmnet_fit$lambda[(which(glmnet_fit$lambda==glmnet_fit$lambda.min)):length(glmnet_fit$lambda)]
lambdas
ctmle_fit1 <- ctmleGlmnet(Y=Y, A=A,
W=data.frame(W=W),
Q = Q, lambdas = lambdas,
ctmletype=1, alpha=.995,
family="gaussian",
gbound=0.025,like_type="loglik" ,
fluctuation="logistic", verbose=FALSE,
detailed=FALSE, PEN=FALSE,
V=5, stopFactor=10^6)
ctmle_fit1
ctmle_fit2 <- ctmleGlmnet(Y=Y, A=A,
W=data.frame(W=W),
Q = Q, lambdas = lambdas,
ctmletype=2, alpha=.995,
family="gaussian",
gbound=0.025,like_type="loglik" ,
fluctuation="logistic", verbose=FALSE,
detailed=FALSE, PEN=FALSE,
V=5, stopFactor=10^6)
ctmle_fit2
gcv <- predict.cv.glmnet(glmnet_fit, newx=Wm, s="lambda.min",type="response")
gcv <- bound(gcv,c(0.025,0.975))
s_prev <- glmnet_fit$lambda[(1:which(glmnet_fit$lambda == glmnet_fit$lambda.min))]
gcvPrev <- predict.cv.glmnet(glmnet_fit,newx=Wm,s=s_prev[length(s_prev)],type="response")
gcvPrev <- bound(gcvPrev,c(0.025,0.975))
tlme_fit <- tmle(Y = Y, A = A, W = W, Q = Q, g1W = gcv)
ctmle_fit3 <- ctmleGlmnet(Y=Y, A=A,
W=W, Q = Q,
ctmletype=3, g1W = gcv, g1WPrev = gcvPrev,
alpha=.995, family="gaussian",
gbound=0.025,like_type="loglik" ,
fluctuation="logistic", verbose=FALSE,
detailed=FALSE, PEN=FALSE,
V=5, stopFactor=10^6)
N <- 1000
p = 10
Wmat <- matrix(rnorm(N * p), ncol = p)
beta1 <- 4+2*Wmat[,1]+2*Wmat[,2]+2*Wmat[,5]+2*Wmat[,6]+2*Wmat[,8]
beta0 <- 2+2*Wmat[,1]+2*Wmat[,2]+2*Wmat[,5]+2*Wmat[,6]+2*Wmat[,8]
tau <- 2
gcoef <- matrix(c(-1,-1,rep(0,(p)-2)),ncol=1)
Wm <- as.matrix(Wmat)
g <- 1/(1+exp(Wm%*%gcoef / 3))
hist(g)
A <- rbinom(N, 1, prob = g)
sigma <- 1
epsilon <-rnorm(N,0,sigma)
Y  <- beta0 + tau * A + epsilon
#----------------------------------------------------------------
#----------------------Test for glmnet CTMLE---------------------
#----------------------------------------------------------------
# cgmleGlmnet must provide user-specified Q
W_tmp <- data.frame(Wm[,1:3])
treated<- W_tmp[which(A==1),]
untreated<-W_tmp[which(A==0),]
Y1<-Y[which(A==1)]
Y0<-Y[which(A==0)]
#Initial Q-estimate
beta1hat <- predict(lm(Y1~.,
data=treated),newdata=W_tmp)
beta0hat <- predict(lm(Y0~.,
data=untreated),newdata=W_tmp)
Q <- matrix(c(beta0hat,beta1hat),ncol=2)
W = Wm
glmnet_fit <- cv.glmnet(y = A, x = Wm, family = 'binomial', nlambda = 40)
lambdas <-glmnet_fit$lambda[(which(glmnet_fit$lambda==glmnet_fit$lambda.min)):length(glmnet_fit$lambda)]
ctmle_fit1 <- ctmleGlmnet(Y=Y, A=A,
W=data.frame(W=W),
Q = Q, lambdas = lambdas,
ctmletype=1, alpha=.995,
family="gaussian",
gbound=0.025,like_type="loglik" ,
fluctuation="logistic", verbose=FALSE,
detailed=FALSE, PEN=FALSE,
V=5, stopFactor=10^6)
ctmle_fit2 <- ctmleGlmnet(Y=Y, A=A,
W=data.frame(W=W),
Q = Q, lambdas = lambdas,
ctmletype=2, alpha=.995,
family="gaussian",
gbound=0.025,like_type="loglik" ,
fluctuation="logistic", verbose=FALSE,
detailed=FALSE, PEN=FALSE,
V=5, stopFactor=10^6)
gcv <- predict.cv.glmnet(glmnet_fit, newx=Wm, s="lambda.min",type="response")
gcv <- bound(gcv,c(0.025,0.975))
s_prev <- glmnet_fit$lambda[(1:which(glmnet_fit$lambda == glmnet_fit$lambda.min))]
gcvPrev <- predict.cv.glmnet(glmnet_fit,newx=Wm,s=s_prev[length(s_prev)],type="response")
gcvPrev <- bound(gcvPrev,c(0.025,0.975))
tlme_fit <- tmle(Y = Y, A = A, W = W, Q = Q, g1W = gcv)
ctmle_fit3 <- ctmleGlmnet(Y=Y, A=A,
W=W, Q = Q,
ctmletype=3, g1W = gcv, g1WPrev = gcvPrev,
alpha=.995, family="gaussian",
gbound=0.025,like_type="loglik" ,
fluctuation="logistic", verbose=FALSE,
detailed=FALSE, PEN=FALSE,
V=5, stopFactor=10^6)
tlme_fit
ctmle_fit3
ctmle_fit2
V = 5
folds <- by(sample(1:N,N), rep(1:V, length=N), list)
folds
V = 5
folds <- by(sample(1:N,N), rep(1:V, length=N), list)
ctmle_discrete_fit4 <- ctmleDiscrete(Y = Y, A = A, W = data.frame(Wmat),Q = Q,
preOrder = TRUE, V = 5, folds = folds,
order = 1:p, detailed = TRUE)
load_all()
N <- 100
p = 5
Wmat <- matrix(rnorm(N * p), ncol = p)
beta1 <- 4+2*Wmat[,1]+2*Wmat[,2]+2*Wmat[,5]
beta0 <- 2+2*Wmat[,1]+2*Wmat[,2]+2*Wmat[,5]
tauW <- 2
tau <- 2
gcoef <- matrix(c(-1,-1,rep(-(3/((p)-2)),(p)-2)),ncol=1)
Wm <- as.matrix(Wmat)
g <- 1/(1+exp(Wm%*%gcoef))
A <- rbinom(N, 1, prob = g)
sigma <- 1
epsilon <-rnorm(N,0,sigma)
Y  <- beta0 + tauW*A + epsilon
#----------------------------------------------------------------
#----------------------Test for discrete CTMLE-------------------
#----------------------------------------------------------------
# With initial estimate of Q
Q <- cbind(rep(mean(Y[A == 0]), N), rep(mean(Y[A == 1]), N))
time_greedy <- system.time(
ctmle_discrete_fit1 <- ctmleDiscrete(Y = Y, A = A, W = data.frame(Wmat), Q = Q,
preOrder = FALSE)
)
ctmle_discrete_fit2 <- ctmleDiscrete(Y = Y, A = A, W = data.frame(Wmat),
preOrder = FALSE, detailed = TRUE)
ctmle_discrete_fit2$candidates
time_preorder <- system.time(
ctmle_discrete_fit3 <- ctmleDiscrete(Y = Y, A = A, W = data.frame(Wmat), Q = Q,
preOrder = TRUE,
order = rev(1:p), detailed = TRUE)
)
V = 5
folds <- by(sample(1:N,N), rep(1:V, length=N), list)
ctmle_discrete_fit4 <- ctmleDiscrete(Y = Y, A = A, W = data.frame(Wmat),Q = Q,
preOrder = TRUE, V = 5, folds = folds,
order = 1:p, detailed = TRUE)
ctmle_discrete_fit5 <- ctmleDiscrete(Y = Y, A = A, W = data.frame(Wmat),Q = Q,
preOrder = TRUE, V = 5, folds = folds,
detailed = TRUE)
ctmle_discrete_fit4 <- ctmleDiscrete(Y = Y, A = A, W = data.frame(Wmat),Q = Q,
preOrder = TRUE, V = 5, folds = folds,
order = 1:p, detailed = TRUE)
expect_warning(
ctmle_discrete_fit5 <- ctmleDiscrete(Y = Y, A = A, W = data.frame(Wmat),Q = Q,
preOrder = TRUE, V = 5, folds = folds,
detailed = TRUE)
)
ctmle_discrete_fit3
ctmle_discrete_fit4$candidates
ctmle_discrete_fit5$candidates
ctmle_discrete_fit4$est
ctmle_discrete_fit5$est
expect_equal(ctmle_discrete_fit4$est, ctmle_discrete_fit5$est)
time_greedy > time_preorder
time_greedy
time_preorder
time_greedy[3]
expect_true(time_greedy[3] > time_preorder[3])
ctmle_discrete_fit5 <- ctmleDiscrete(Y = Y, A = A, W = data.frame(Wmat),
preOrder = TRUE,
order = rev(1:p))
ctmle_discrete_fit5$est
load_all()
?build_gn_seq
document()
load_all()
?build_gn_seq
check()
roxygenize()
library(roxygen2)
roxygenize()
document()
library(ctmle)
build_gn_seq()
build_gn_seq
check()
check()
check()
N <- 1000
p = 100
V = 5
Wmat <- matrix(rnorm(N * p), ncol = p)
gcoef <- matrix(c(-1,-1,rep(-(3/((p)-2)),(p)-2)),ncol=1)
W <- as.data.frame(Wmat)
g <- 1/(1+exp(Wmat%*%gcoef / 3))
folds <-by(sample(1:N,N), rep(1:V, length=N), list)
A <- rbinom(N, 1, prob = g)
lasso_fit <- cv.glmnet(x = as.matrix(W), y = A, alpha = 1, nlambda = 100, nfolds = 10)
lasso_lambdas <- lasso_fit$lambda[lasso_fit$lambda <= lasso_fit$lambda.min][1:5]
# Build template for glmnet
SL.glmnet_new <- function (Y, X, newX, family, obsWeights, id, alpha = 1,
nlambda = 100, lambda = 0,...)
{
# browser()
if (!is.matrix(X)) {
X <- model.matrix(~-1 + ., X)
newX <- model.matrix(~-1 + ., newX)
}
fit <- glmnet::glmnet(x = X, y = Y,
lambda = lambda,
family = family$family, alpha = alpha)
pred <- predict(fit, newx = newX, type = "response")
fit <- list(object = fit)
class(fit) <- "SL.glmnet"
out <- list(pred = pred, fit = fit)
return(out)
}
# Use a sequence of estimator to build gn sequence:
SL.cv1lasso <- function (... , alpha = 1, lambda = lasso_lambdas[1]){
SL.glmnet_new(... , alpha = alpha, lambda = lambda)
}
SL.cv2lasso <- function (... , alpha = 1, lambda = lasso_lambdas[2]){
SL.glmnet_new(... , alpha = alpha, lambda = lambda)
}
SL.cv3lasso <- function (... , alpha = 1, lambda = lasso_lambdas[3]){
SL.glmnet_new(... , alpha = alpha, lambda = lambda)
}
SL.cv4lasso <- function (... , alpha = 1, lambda = lasso_lambdas[4]){
SL.glmnet_new(... , alpha = alpha, lambda = lambda)
}
SL.library = c('SL.cv1lasso', 'SL.cv2lasso', 'SL.cv3lasso', 'SL.cv4lasso', 'SL.glm')
gn_seq <- build_gn_seq(A = A, W = W, SL.library = SL.library, folds = folds)
expect_equal(dim(gn_seq$gn_candidates_cv), c(N, V))
expect_equal(dim(gn_seq$gn_candidates), c(N, V))
expect_equal(length(gn_seq$folds), V)
gn_seq
check()
check()
document()
check()
library(SuperLearner)
?SL.randomForest
m <- length(SL.library)
SL.library = c('SL.glm')
m <- length(SL.library)
m
SL.cv1lasso
SL.cv1lasso <- function (... , alpha = 1, lambda = lasso_lambdas[1]){
SL.glmnet_new(... , alpha = alpha, lambda = lambda)
}
SL.glmnet_new <- function(Y, X, newX, family, obsWeights, id, alpha = 1,
nlambda = 100, lambda = 0,...){
# browser()
if (!is.matrix(X)) {
X <- model.matrix(~-1 + ., X)
newX <- model.matrix(~-1 + ., newX)
}
fit <- glmnet::glmnet(x = X, y = Y,
lambda = lambda,
family = family$family, alpha = alpha)
pred <- predict(fit, newx = newX, type = "response")
fit <- list(object = fit)
class(fit) <- "SL.glmnet"
out <- list(pred = pred, fit = fit)
return(out)
}
# Use a sequence of estimator to build gn sequence:
SL.cv1lasso <- function (... , alpha = 1, lambda = lasso_lambdas[1]){
SL.glmnet_new(... , alpha = alpha, lambda = lambda)
}
SL.cv2lasso <- function (... , alpha = 1, lambda = lasso_lambdas[2]){
SL.glmnet_new(... , alpha = alpha, lambda = lambda)
}
SL.cv3lasso <- function (... , alpha = 1, lambda = lasso_lambdas[3]){
SL.glmnet_new(... , alpha = alpha, lambda = lambda)
}
SL.cv4lasso <- function (... , alpha = 1, lambda = lasso_lambdas[4]){
SL.glmnet_new(... , alpha = alpha, lambda = lambda)
}
m <- length(SL.library)
gn_seq <- build_gn_seq(A = A, W = W, SL.library = SL.library, folds = folds)
load_all()
library(devtools)
load_all()
m <- length(SL.library)
gn_seq <- build_gn_seq(A = A, W = W, SL.library = SL.library, folds = folds)
N <- 1000
p = 100
V = 5
Wmat <- matrix(rnorm(N * p), ncol = p)
gcoef <- matrix(c(-1,-1,rep(-(3/((p)-2)),(p)-2)),ncol=1)
W <- as.data.frame(Wmat)
g <- 1/(1+exp(Wmat%*%gcoef / 3))
A <- rbinom(N, 1, prob = g)
folds <-by(sample(1:N,N), rep(1:V, length=N), list)
lasso_fit <- cv.glmnet(x = as.matrix(W), y = A, alpha = 1, nlambda = 100, nfolds = 10)
lasso_lambdas <- lasso_fit$lambda[lasso_fit$lambda <= lasso_fit$lambda.min][1:5]
# Build template for glmnet
SL.glmnet_new <- function(Y, X, newX, family, obsWeights, id, alpha = 1,
nlambda = 100, lambda = 0,...){
# browser()
if (!is.matrix(X)) {
X <- model.matrix(~-1 + ., X)
newX <- model.matrix(~-1 + ., newX)
}
fit <- glmnet::glmnet(x = X, y = Y,
lambda = lambda,
family = family$family, alpha = alpha)
pred <- predict(fit, newx = newX, type = "response")
fit <- list(object = fit)
class(fit) <- "SL.glmnet"
out <- list(pred = pred, fit = fit)
return(out)
}
# Use a sequence of estimator to build gn sequence:
SL.cv1lasso <- function (... , alpha = 1, lambda = lasso_lambdas[1]){
SL.glmnet_new(... , alpha = alpha, lambda = lambda)
}
SL.cv2lasso <- function (... , alpha = 1, lambda = lasso_lambdas[2]){
SL.glmnet_new(... , alpha = alpha, lambda = lambda)
}
SL.cv3lasso <- function (... , alpha = 1, lambda = lasso_lambdas[3]){
SL.glmnet_new(... , alpha = alpha, lambda = lambda)
}
SL.cv4lasso <- function (... , alpha = 1, lambda = lasso_lambdas[4]){
SL.glmnet_new(... , alpha = alpha, lambda = lambda)
}
SL.library = c('SL.cv1lasso', 'SL.cv2lasso', 'SL.cv3lasso', 'SL.cv4lasso', 'SL.glm')
m <- length(SL.library)
gn_seq <- build_gn_seq(A = A, W = W, SL.library = SL.library, folds = folds)
expect_equal(dim(gn_seq$gn_candidates_cv), c(N, m))
expect_equal(dim(gn_seq$gn_candidates), c(N, m))
expect_equal(length(gn_seq$folds), V)
library(testthat)
test()
document()
?glm
library(stats)
document()
document()
?.BH
?.BH
.BH
library(tmle)
.BH
document()
document()
document()
?SuperLearner
document()
install.packages('simcausal')
devtools::use_readme_rmd()
